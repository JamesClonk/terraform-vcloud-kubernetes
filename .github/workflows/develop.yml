name: Update Develop cluster

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform-apply:
    name: 'terraform apply'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check release version variable
      run: |
        TF_VAR_VERSION=$(cat variables.tf | grep 'variable "module_version"' -A2 | grep default | awk -F'"' '{print $2;}')
        if [ $(git tag -l "${TF_VAR_VERSION}") ]; then
            echo "Release ${TF_VAR_VERSION} already exists on GitHub! Did you forget to update the 'module_version'?"
            exit 1
        fi

    - name: Setup Terraform Override
      if: github.ref == 'refs/heads/develop'
      env:
        DEV_TF_OVERRIDE: ${{ secrets.DEV_TF_OVERRIDE }}
      run: echo "${DEV_TF_OVERRIDE}" > override.tf

    - name: Setup Terraform tfvars
      if: github.ref == 'refs/heads/develop'
      env:
        DEV_TF_TFVARS: ${{ secrets.DEV_TF_TFVARS }}
      run: echo "${DEV_TF_TFVARS}" > terraform.tfvars

    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: ~1.2.8

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/develop'
      run: terraform apply -auto-approve -input=false

    - name: Cleanup
      if: ${{ always() }}
      run: |
        rm -f kubeconfig || true
        rm -f terraform.tfvars || true

  sonobuoy-run:
    name: 'sonobuoy run'
    needs: [ terraform-apply ]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup kubeconfig
      if: github.ref == 'refs/heads/develop'
      env:
        DEV_KUBECONFIG: ${{ secrets.DEV_KUBECONFIG }}
      run: echo "${DEV_KUBECONFIG}" > kubeconfig

    - name: Run Sonobuoy
      run: |
        wget --quiet https://github.com/vmware-tanzu/sonobuoy/releases/download/v0.56.10/sonobuoy_0.56.10_linux_amd64.tar.gz
        tar -xvzf sonobuoy_0.56.10_linux_amd64.tar.gz
        chmod +x sonobuoy
        export KUBECONFIG=kubeconfig
        ./sonobuoy delete --wait || true
        ./sonobuoy run --mode quick --wait --plugin-env=e2e.E2E_EXTRA_ARGS=--non-blocking-taints=CriticalAddonsOnly,true,NoExecute
        ./sonobuoy status
        results=$(./sonobuoy retrieve)
        ./sonobuoy results $results
        ./sonobuoy delete --wait

    - name: Cleanup
      if: ${{ always() }}
      run: |
        rm -f kubeconfig || true

  kubernetes-testing:
    name: 'kubernetes-testing'
    needs: [ sonobuoy-run ]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout kubernetes-testing
      uses: actions/checkout@v3
      with:
        repository: swisscom/kubernetes-testing
        ref: master

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.7'
        bundler-cache: true

    - name: Setup configs
      if: github.ref == 'refs/heads/develop'
      env:
        DEV_KUBECONFIG: ${{ secrets.DEV_KUBECONFIG }}
        DEV_TESTING_CONFIG: ${{ secrets.DEV_TESTING_CONFIG }}
      run: |
        echo "${DEV_KUBECONFIG}" > kubeconfig
        echo "${DEV_TESTING_CONFIG}" > config.yml

    - name: Setup Chrome
      uses: ./.github/actions/setup-chrome

    - name: Run kubernetes-testing specs
      run: |
        export KUBECONFIG=kubeconfig
        make test

    - name: Cleanup
      if: ${{ always() }}
      run: |
        rm -f kubeconfig || true
        rm -f config.yml || true
